/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projectmanagementsystem.Student;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import projectmanagementsystem.Admin.StudentData;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Random;
import java.util.Set;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tioh
 */
public final class ReportSubmission extends javax.swing.JFrame {

    private ArrayList<String> globalid;
    private ArrayList<String> globaltype;

    /**
     * Creates new form ReportSubmission
     */
    public ReportSubmission() {
        initComponents();
        globalid = new ArrayList<>();
        globaltype = new ArrayList<>();
        populateTable(StudentData.usernameToDelete);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AddBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        SubmissionText = new javax.swing.JLabel();
        GradeText = new javax.swing.JLabel();
        TypeBox = new javax.swing.JComboBox<>();
        BackBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AssessmentTable = new javax.swing.JTable();
        DeleteBtn = new javax.swing.JButton();
        dateBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Report Submission");

        jLabel2.setText("Submission Status:");

        jLabel3.setText("Grade:");

        AddBtn.setText("Add Submission");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Assessment Type:");

        SubmissionText.setText("Not Submitted");

        GradeText.setText("Not Graded");

        TypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Internship", "Investigation Reports", "CP1", "CP2", "RMCP", "FYP" }));

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(83, 83, 83)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(GradeText)
                                    .addComponent(SubmissionText)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(AddBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(BackBtn)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1)))
                .addContainerGap(206, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SubmissionText))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(GradeText))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtn)
                    .addComponent(BackBtn))
                .addGap(38, 38, 38))
        );

        AssessmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Assignment Type", "Date", "Submission Link"
            }

        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    AssessmentTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    AssessmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            AssessmentTableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(AssessmentTable);

    DeleteBtn.setText("Delete");
    DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            DeleteBtnActionPerformed(evt);
        }
    });

    dateBtn.setText("Request Presentation Date");
    dateBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            dateBtnActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                        .addComponent(DeleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(138, 138, 138))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(DeleteBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(dateBtn)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(16, 16, 16))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Successfully submitted!");
        String selectedValue = (String) TypeBox.getSelectedItem();
        addAssessment(selectedValue);
    }//GEN-LAST:event_AddBtnActionPerformed

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        Student student = new Student();
        student.setVisible(true);
        ReportSubmission.this.setVisible(false);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedIndex = AssessmentTable.getSelectedRow();
        if (selectedIndex != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this?");
            if (option == JOptionPane.YES_OPTION) {
                Object value = AssessmentTable.getValueAt(selectedIndex, 0); // Assuming the first column is index 0 
                String val = value.toString();
                deleteLinesById("assessment.txt", val);
                JOptionPane.showMessageDialog(this, value + "'s data has been deleted successfully!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a id to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void dateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateBtnActionPerformed
        // TODO add your handling code here:
        int selectedIndex = AssessmentTable.getSelectedRow();
        presentationData.assessmentID = globalid.get(selectedIndex);
        presentationData.assessmentType = globaltype.get(selectedIndex);
        RequestDate date = new RequestDate();
        date.setVisible(true);
    }//GEN-LAST:event_dateBtnActionPerformed

    private void AssessmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AssessmentTableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            JTable target = (JTable) evt.getSource();
            int row = target.getSelectedRow();
            if (row != -1) {
                // Get the data from the selected row
                String ID = (String) target.getValueAt(row, 0);
                try (BufferedReader reader = new BufferedReader(new FileReader("assessment.txt"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\",\\s*\""); // Split the line by "\", " with optional spaces
                        String txtID = parts[1].trim();
                        String SubmissionStatus = parts[5].trim();
                        String Grade = parts[6].trim().replaceAll("\"", "");
                        if (ID.equalsIgnoreCase(txtID)) {
                            SubmissionText.setText(SubmissionStatus);
                            GradeText.setText(Grade);

                        }
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_AssessmentTableMouseClicked

    private static void deleteLinesById(String filename, String id) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            StringBuilder buffer = new StringBuilder();
            String line;
            boolean skipNextLines = false;

            while ((line = reader.readLine()) != null) {
                if (!line.startsWith("\"" + StudentData.usernameToDelete + "\", \"" + id)) {
                    buffer.append(line).append(System.lineSeparator());
                } else {
                    skipNextLines = true; // Set flag to skip next lines after ID match
                }

                if (skipNextLines) {
                    // Skip the next 4 lines assuming they are to be deleted
                    reader.readLine();
                    skipNextLines = false; // Reset flag after skipping lines
                }
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
                writer.write(buffer.toString());
            } catch (IOException e) {
                System.err.println("Error writing to file: " + e.getMessage());
            }

        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    void addAssessment(String type) {
        Set<Integer> existingNumbers = readSecondElementsFromFile();
        Random random = new Random();
        int randomNumber;
        LocalDateTime currentTime = getCurrentTime();
        UUID uuid = UUID.randomUUID();
        String code = uuid.toString().substring(0, 8);
        do {
            randomNumber = random.nextInt(90000) + 10000; // Generate number between 10000 and 99999

        } while (existingNumbers.contains(randomNumber));
        try {
            int ln = 0;
            RandomAccessFile raf = new RandomAccessFile("assessment.txt", "rw");
            for (int i = 0; raf.readLine() != null; i++) {
                ln++;
            }
            if (ln > 0) {
                raf.writeBytes("\r\n");
                raf.writeBytes("\r\n");
            }

            raf.writeBytes("\"" + StudentData.usernameToDelete + "\", \"" + randomNumber + "\", \"" + type + "\", \"" + currentTime + "\", \"https://moodle.AGH.edu.my/" + code + "\", \"Submitted\", \"Not Graded\"\n");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ReportSubmission.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ReportSubmission.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // checks if the id is taken or not
    private static Set<Integer> readSecondElementsFromFile() {
        Set<Integer> secondElements = new HashSet<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("assessment.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.isEmpty()) {  // Skip empty lines
                    String[] elements = line.split(",");  // Split line by comma
                    for (int i = 0; i < elements.length; i++) {
                        elements[i] = elements[i].trim().replaceAll("\"", "");
                    }
                    if (elements.length >= 2) {  // Check if there are at least 2 elements
                        int number = Integer.parseInt(elements[1].trim());  // Parse second element as int
                        secondElements.add(number);
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading from file: " + e.getMessage());
        }

        return secondElements;
    }

    // formats the date time
    private static LocalDateTime getCurrentTime() {
        LocalDateTime currentTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return LocalDateTime.parse(currentTime.format(formatter), formatter);
    }

    // populates the JTable from data in the text file
    public void populateTable(String usernameToDelete) {
        globalid = new ArrayList<>();
        globaltype = new ArrayList<>();

        DefaultTableModel model = (DefaultTableModel) AssessmentTable.getModel();

        try (BufferedReader reader = new BufferedReader(new FileReader("assessment.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\",\\s*\""); // Split the line by "\", " with optional spaces

                // Check if the line contains data for the desired user
                if (parts.length >= 7 && parts[0].equals("\"" + usernameToDelete)) {
                    // Extract data for ID, Type, Date, and Link from the parts array
                    String id = parts[1];
                    String type = parts[2];
                    String date = parts[3];
                    String link = parts[4];
                    globalid.add(parts[1]);
                    globaltype.add(parts[2]);

                    // Remove double quotes from extracted values
                    id = id.replaceAll("\"", "").trim();
                    type = type.replaceAll("\"", "").trim();
                    date = date.replaceAll("\"", "").trim();
                    link = link.replaceAll("\"", "").trim();

                    // Create an array with the data and add it as a new row to the table
                    Object[] rowData = {id, type, date, link};
                    model.addRow(rowData);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportSubmission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportSubmission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportSubmission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportSubmission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ReportSubmission().setVisible(true);
        });

        // Add mouse listener to the table
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private static javax.swing.JTable AssessmentTable;
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton DeleteBtn;
    private static javax.swing.JLabel GradeText;
    private static javax.swing.JLabel SubmissionText;
    private javax.swing.JComboBox<String> TypeBox;
    private javax.swing.JButton dateBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
