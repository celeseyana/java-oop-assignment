/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projectmanagementsystem.projmanager;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class assignMkrSpvr extends javax.swing.JFrame {

    private ArrayList<String> globalname;
    private ArrayList<String> globalid;
    private ArrayList<String> globalprojmgrBool;
    private ArrayList<String> globalspvs;
    private ArrayList<String> globalsecmark;

    /**
     * Creates new form main
     */
    public assignMkrSpvr() {
        initComponents();
        globalname = new ArrayList<>();
        globalid = new ArrayList<>();
        globalprojmgrBool = new ArrayList<>();
        globalspvs = new ArrayList<>();
        globalsecmark = new ArrayList<>();
        assignMkrTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonBox1 = new javax.swing.JPanel();
        assignSpvrBtn = new javax.swing.JButton();
        assignMarkerBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        availabilityTable = new javax.swing.JTable();
        backBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonBox1.setToolTipText("");

        assignSpvrBtn.setText("Assign as Supervisor");
        assignSpvrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignSpvrBtnActionPerformed(evt);
            }
        });

        assignMarkerBtn.setText("Assign as Marker");
        assignMarkerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignMarkerBtnActionPerformed(evt);
            }
        });

        availabilityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Password", "Project Manager", "Supervisor", "Second Marker"
            }
        ));
        jScrollPane1.setViewportView(availabilityTable);

        backBtn1.setText("Back");
        backBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonBox1Layout = new javax.swing.GroupLayout(buttonBox1);
        buttonBox1.setLayout(buttonBox1Layout);
        buttonBox1Layout.setHorizontalGroup(
            buttonBox1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonBox1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backBtn1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonBox1Layout.createSequentialGroup()
                .addGap(34, 221, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(buttonBox1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(assignMarkerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(assignSpvrBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );
        buttonBox1Layout.setVerticalGroup(
            buttonBox1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonBox1Layout.createSequentialGroup()
                .addGroup(buttonBox1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonBox1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buttonBox1Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(assignMarkerBtn)
                        .addGap(151, 151, 151)
                        .addComponent(assignSpvrBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(backBtn1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(buttonBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void assignSpvrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignSpvrBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel) availabilityTable.getModel();
        int selectedIndex = availabilityTable.getSelectedRow();
        String name = (String) model.getValueAt(selectedIndex, 0);
        String id = (String) model.getValueAt(selectedIndex, 1);
        String projmgrBool = (String) model.getValueAt(selectedIndex, 2);
        String secmark = (String) model.getValueAt(selectedIndex, 4);
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to assign" + name + " as Supervisor?");
        if (choice == JOptionPane.YES_OPTION) {
            if (checkStatus(secmark) == false) {
                model.setValueAt("True", selectedIndex, 3);
                String spvs2 = (String) model.getValueAt(selectedIndex, 3);
                textSave(name, id, projmgrBool, spvs2, secmark);
                JOptionPane.showMessageDialog(this, "Assigned Successfully");
            } else {
                JOptionPane.showMessageDialog(this, name + " is already a second marker!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_assignSpvrBtnActionPerformed

    private void assignMarkerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignMarkerBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel) availabilityTable.getModel();
        int selectedIndex = availabilityTable.getSelectedRow();
        String name = (String) model.getValueAt(selectedIndex, 0);
        String id = (String) model.getValueAt(selectedIndex, 1);
        String projmgrBool = (String) model.getValueAt(selectedIndex, 2);
        String spvs = (String) model.getValueAt(selectedIndex, 3);

        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to assign" + name + " as Second Marker?");
        if (choice == JOptionPane.YES_OPTION) {
            if (checkStatus(spvs) == false) {
                model.setValueAt("True", selectedIndex, 4);
                String secmark2 = (String) model.getValueAt(selectedIndex, 4);
                textSave(name, id, projmgrBool, spvs, secmark2);
                JOptionPane.showMessageDialog(this, "Assigned Successfully");
            } else {
                JOptionPane.showMessageDialog(this, name + " is already a supervisor!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_assignMarkerBtnActionPerformed

    private void backBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtn1ActionPerformed
        homepageprojmanager homepageFrame = new homepageprojmanager();
        homepageFrame.setVisible(true);
        assignMkrSpvr.this.setVisible(false);
    }//GEN-LAST:event_backBtn1ActionPerformed

    static boolean checkStatus(String status) {
        if (status.equalsIgnoreCase("True")) {
            return true;
        } else {
            return false;
        }
    }

    public static void textSave(String name, String id, String projmgrBool, String spvs, String secmark) {
        StringBuilder fileContent = new StringBuilder();

        try (BufferedReader reader = new BufferedReader(new FileReader("lecturer.txt"))) {
            String line;

            while ((line = reader.readLine()) != null) {
                String trimmedLine = line.trim();
                if (trimmedLine.startsWith("\"") && trimmedLine.endsWith("\"")) {
                    String[] parts = trimmedLine.split("\",\\s*\"");
                    if (parts.length >= 5 && parts[0].equals("\"" + name)) {
                        fileContent.append("\"").append(name).append("\", \"").append(id).append("\", \"")
                                .append(projmgrBool).append("\", \"")
                                .append(spvs).append("\", \"")
                                .append(secmark).append("\"\n");
                    } else {
                        fileContent.append(line).append("\n");
                    }
                } else {
                    fileContent.append(line).append("\n");
                }
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("lecturer.txt"))) {
                writer.write(fileContent.toString());
                System.out.println("Data Updated Successfully!");
            } catch (IOException e) {
                System.err.println("Error writing to file: " + e.getMessage());
            }

        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    public void assignMkrTable() {
        globalname = new ArrayList<>();
        globalid = new ArrayList<>();
        globalprojmgrBool = new ArrayList<>();
        globalspvs = new ArrayList<>();
        globalsecmark = new ArrayList<>();

        DefaultTableModel model = (DefaultTableModel) availabilityTable.getModel();

        try (BufferedReader reader = new BufferedReader(new FileReader("lecturer.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\",\\s*\""); // Split the line by "\", " with optional spaces

                // Check if the line contains data for the desired user
                if (parts.length >= 5) {
                    // Extract data for ID, Type, Date, and Link from the parts array
                    String name = parts[0];
                    String id = parts[1];
                    String projmgrBool = parts[2];
                    String spvs = parts[3];
                    String secmark = parts[4];

                    globalname.add(parts[0]);
                    globalid.add(parts[1]);
                    globalprojmgrBool.add(parts[2]);
                    globalspvs.add(parts[3]);
                    globalsecmark.add(parts[4]);

                    // Remove double quotes from extracted values
                    name = name.replaceAll("\"", "").trim();
                    id = id.replaceAll("\"", "").trim();
                    projmgrBool = projmgrBool.replaceAll("\"", "").trim();
                    spvs = spvs.replaceAll("\"", "").trim();
                    secmark = secmark.replaceAll("\"", "").trim();

                    // Create an array with the data and add it as a new row to the table
                    Object[] rowData = {name, id, projmgrBool, spvs, secmark};
                    model.addRow(rowData);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(assignMkrSpvr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(assignMkrSpvr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(assignMkrSpvr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(assignMkrSpvr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new assignMkrSpvr().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignMarkerBtn;
    private javax.swing.JButton assignSpvrBtn;
    private javax.swing.JTable availabilityTable;
    private javax.swing.JButton backBtn1;
    private javax.swing.JPanel buttonBox1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
