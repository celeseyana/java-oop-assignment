/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projectmanagementsystem.projmanager;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import projectmanagementsystem.Admin.StudentData;

/**
 *
 * @author User
 */
public class studentAssign extends javax.swing.JFrame {

    private ArrayList<String> globalname;
    private ArrayList<String> globalpassword;
    private ArrayList<String> globalintake;
    private ArrayList<String> globalassessment;
    private ArrayList<String> globalLecturer;

    /**
     * Creates new form reportviewFrame
     */
    public studentAssign() {
        initComponents();
        globalname = new ArrayList<>();
        globalpassword = new ArrayList<>();
        globalintake = new ArrayList<>();
        globalassessment = new ArrayList<>();
        globalLecturer = new ArrayList<>();
        assignStudentTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        assignStudentBtn = new javax.swing.JButton();
        assignLecturerBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backBtn4.setText("Back");
        backBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtn4ActionPerformed(evt);
            }
        });

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Intake Code", "Assessment", "Assigned Lecturer"
            }
        ));
        jScrollPane1.setViewportView(studentTable);

        assignStudentBtn.setText("Assign to Assessment");
        assignStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignStudentBtnActionPerformed(evt);
            }
        });

        assignLecturerBtn.setText("Assign to Lecturer");
        assignLecturerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignLecturerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backBtn4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(125, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(assignStudentBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(assignLecturerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(assignStudentBtn)
                        .addGap(18, 18, 18)
                        .addComponent(assignLecturerBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(backBtn4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void assignStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignStudentBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
        int selectedIndex = studentTable.getSelectedRow();

        String name = (String) model.getValueAt(selectedIndex, 0);
        String intake = (String) model.getValueAt(selectedIndex, 1);
        String password = globalpassword.get(selectedIndex);
        String lecturer = globalLecturer.get(selectedIndex);

        String[] assessmentType = {"Internship", "Investigation Report", "CP1", "CP2", "RMCP", "FYP"};

        Object choice = JOptionPane.showInputDialog(this, "Choose", "Menu", JOptionPane.PLAIN_MESSAGE, null, assessmentType, assessmentType[0]);
        if (choice != null) {
            String choiceString = choice.toString();
            String assessment = choiceString;
            int meow = JOptionPane.showConfirmDialog(this, "Are you sure you want to assign this option type?");
            if (meow == JOptionPane.YES_OPTION) {
                textSave(name, password, intake, assessment, lecturer);
                JOptionPane.showMessageDialog(this, "Assigned Successfully");
            }

        }


    }//GEN-LAST:event_assignStudentBtnActionPerformed

    private void backBtn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtn4ActionPerformed
        homepageprojmanager homepageFrame = new homepageprojmanager();
        homepageFrame.setVisible(true);
        studentAssign.this.setVisible(false);
    }//GEN-LAST:event_backBtn4ActionPerformed

    private void assignLecturerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignLecturerBtnActionPerformed
        // TODO add your handling code here:
        int selectedIndex = studentTable.getSelectedRow();
        StudentData.usernameToDelete = globalname.get(selectedIndex);
        StudentData.passwordToEdit = globalpassword.get(selectedIndex);
        StudentData.intakeToEdit = globalintake.get(selectedIndex);
        StudentData.typeToEdit = globalassessment.get(selectedIndex);
        StudentData.lecturerToEdit = globalLecturer.get(selectedIndex);
        assignLecturer assignlecturer = new assignLecturer();
        assignlecturer.setVisible(true);
    }//GEN-LAST:event_assignLecturerBtnActionPerformed

    static boolean checkStatus(String status) {
        if (status.equalsIgnoreCase("null")) {
            return true;
        } else {
            return false;
        }
    }

    public static void textSave(String name, String password, String intake, String assessment, String lecturer) {
        StringBuilder fileContent = new StringBuilder();

        try (BufferedReader reader = new BufferedReader(new FileReader("student.txt"))) {
            String line;

            while ((line = reader.readLine()) != null) {
                String trimmedLine = line.trim();
                if (trimmedLine.startsWith("\"") && trimmedLine.endsWith("\"")) {
                    String[] parts = trimmedLine.split("\",\\s*\"");
                    if (parts.length >= 5 && parts[0].replaceAll("\"", "").equals(name)) {
                        fileContent.append("\"").append(name).append("\", \"").append(password).append("\", \"")
                                .append(intake).append("\", \"")
                                .append(assessment).append("\", \"")
                                .append(lecturer).append("\"\n");
                    } else {
                        fileContent.append(line).append("\n");
                    }
                } else {
                    fileContent.append(line).append("\n");
                }
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("student.txt"))) {
                writer.write(fileContent.toString());
                System.out.println("Data Updated Successfully!");
            } catch (IOException e) {
                System.err.println("Error writing to file: " + e.getMessage());
            }

        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    public void assignStudentTable() {
        globalname = new ArrayList<>();
        globalpassword = new ArrayList<>();
        globalintake = new ArrayList<>();
        globalassessment = new ArrayList<>();
        globalLecturer = new ArrayList<>();

        DefaultTableModel model = (DefaultTableModel) studentTable.getModel();

        try (BufferedReader reader = new BufferedReader(new FileReader("student.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\",\\s*\""); // Split the line by "\", " with optional spaces

                // Check if the line contains data for the desired user
                if (parts.length >= 5) {
                    // Extract data for ID, Type, Date, and Link from the parts array
                    String name = parts[0];
                    String password = parts[1];
                    String intake = parts[2];
                    String assessment = parts[3];
                    String lecturer = parts[4];

                    globalname.add(parts[0]);
                    globalpassword.add(parts[1]);
                    globalintake.add(parts[2]);
                    globalassessment.add(parts[3]);
                    globalLecturer.add(parts[4]);

                    // Remove double quotes from extracted values
                    name = name.replaceAll("\"", "").trim();
                    password = password.replaceAll("\"", "").trim();
                    intake = intake.replaceAll("\"", "").trim();
                    assessment = assessment.replaceAll("\"", "").trim();
                    lecturer = lecturer.replaceAll("\"", "").trim();

                    // Create an array with the data and add it as a new row to the table
                    Object[] rowData = {name, intake, assessment, lecturer};
                    model.addRow(rowData);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(studentAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(studentAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(studentAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(studentAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new studentAssign().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignLecturerBtn;
    private javax.swing.JButton assignStudentBtn;
    private javax.swing.JButton backBtn4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable studentTable;
    // End of variables declaration//GEN-END:variables
}
